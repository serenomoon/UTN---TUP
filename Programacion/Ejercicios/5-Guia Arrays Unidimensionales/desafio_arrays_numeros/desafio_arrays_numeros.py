# üìå Desaf√≠o: Men√∫ de Opciones con Listas y Funciones
# Desarrollar un programa en Python que presente un men√∫ de opciones donde el usuario pueda realizar distintas operaciones con un conjunto de n√∫meros.
# üîπ Opciones del Men√∫:
#  1Ô∏è‚É£ Ingresar datos: Permitir al usuario ingresar 10 n√∫meros enteros en el rango de -1000 a 1000.
#  2Ô∏è‚É£ Cantidad de positivos y negativos: Mostrar cu√°ntos n√∫meros ingresados son positivos y cu√°ntos son negativos.
#  3Ô∏è‚É£ Suma de los n√∫meros pares: Calcular y mostrar la sumatoria de los n√∫meros pares.
#  4Ô∏è‚É£ Mayor n√∫mero impar: Identificar y mostrar el mayor n√∫mero impar ingresado.
#  5Ô∏è‚É£ Listar los n√∫meros ingresados: Mostrar todos los n√∫meros en el orden en que fueron ingresados.
#  6Ô∏è‚É£ Listar los n√∫meros pares: Mostrar √∫nicamente los n√∫meros pares de la lista.
#  7Ô∏è‚É£ Listar los n√∫meros en posiciones impares: Mostrar los n√∫meros que se encuentran en posiciones impares dentro de la lista.
#  8Ô∏è‚É£ Salir del programa.
# üîπ Condiciones:
#  ‚úîÔ∏è El usuario debe ingresar los n√∫meros antes de acceder a las opciones 2 a 7.
#  ‚úîÔ∏è El programa debe estar estructurado en funciones, siguiendo el paradigma de programaci√≥n funcional:
# Funciones espec√≠ficas: Para operaciones como determinar si un n√∫mero es positivo, negativo o par.
# Funciones generales: Para listar elementos o calcular sumatorias.
# üîπ Estructura del C√≥digo:
#  üìå El programa debe estar organizado en m√≥dulos:
# Especificas.py: Contendr√° las funciones espec√≠ficas.
# Array_Generales.py: Contendr√° las funciones generales.
# Las funciones de entrada de datos deben importarse desde el m√≥dulo Input.
# üîπ Consejo:
#  ‚úÖ Desarrollar y probar primero cada funci√≥n individualmente antes de organizarlas en m√≥dulos.


import sys
from os import system
from array_generales import *
from especificas import *
import colorama as C


def main() -> None:
    bandera_menu = True
    bandera_carga = False
    vector = crear_vector(None,10) 
    while bandera_menu:
        print(C.Fore.BLUE + "1. Ingresar Datos\n2. Cantidad de positivos y negativos\n3. Suma de los n√∫meros pares\n4. Mayor n√∫mero impar\n5. Listar los n√∫meros ingresados\n6. Listar los n√∫meros pares\n7. Listar los n√∫meros en posiciones impares\n8. Salir del programa")
        opcion = int(input("Ingresar una opcion: "))
        match opcion:
            case 1:
                cargar_lista(vector)
                bandera_carga = True
            case 2:
                if bandera_carga:
                    positivos_negativos(vector)
                else:
                    print("Cargue una lista primero")
            case 3:
                if bandera_carga:
                    sumar_pares = sumar_numeros_pares(vector)
                    print(f"La suma de los numeros pares es: { sumar_pares }")
                else:
                    print("Cargue una lista primero")
            case 4:
                if bandera_carga:
                    mayor_impar = buscar_maximo_impar(vector)
                    if mayor_impar == None:
                        print("No hay ningun impar en la lista")
                    else:
                        print(f"El mayor numero impar es: {mayor_impar}")
                else:
                    print("Cargue una lista primero")
            case 5:
                if bandera_carga:
                    mostrar_lista(vector)
                else:
                    print("Cargue una lista primero")
            case 6:
                if bandera_carga:
                    lista_pares = lista_numeros_pares(vector)
                    print(f"Los numeros pares de la lista son: {lista_pares}")
                else:
                    print("Cargue una lista primero")
            case 7:
                if bandera_carga:
                    posiciones_impares = lista_numeros_posiciones_impares(vector)
                    print(f"Los numeros en posiciones imapares de la lista son: {posiciones_impares}")
                else:
                    print("Cargue una lista primero")
            case 8:
                print("Saliendo del programa...")
                bandera_menu = False
        system("pause")
        system("cls")



if __name__ == "__main__":
    sys,exit(main())