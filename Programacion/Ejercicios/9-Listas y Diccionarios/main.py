# Playlist de Lady Gaga - Gestor de Videos en YouTube üé∂
# Lady Gaga es una de las artistas m√°s influyentes del pop, con una extensa lista de reproducciones en YouTube. 
# Para facilitar el an√°lisis y manipulaci√≥n de su contenido, desarrollaremos un software que permita gestionar su lista de videos.
# A trav√©s de un men√∫ interactivo, los usuarios podr√°n visualizar, ordenar, buscar y analizar la informaci√≥n de cada video de la lista.
# üìå Funcionalidades del Software
# üîπ 1. Normalizaci√≥n de Datos
# El formato original de los datos no est√° estandarizado, por lo que se deben normalizar utilizando funciones preexistentes. 
# Cada video deber√° contener la siguiente informaci√≥n correctamente estructurada:
# T√≠tulo (str): Nombre del tema.
# Colaboradores (list): Lista de artistas invitados (si los hay).
# Vistas (int): Cantidad de reproducciones en n√∫meros enteros.
# Duraci√≥n (int): Duraci√≥n del video en segundos.
# Link (str): Enlace directo al video en YouTube.
# Fecha de lanzamiento (date): Fecha de publicaci√≥n del video.
# üîπ 2. Mostrar Lista de Temas
# Se presentar√° la lista de todos los temas en formato tabular. 
# No es necesario mostrar todos los datos, solo los esenciales (por ejemplo, t√≠tulo y duraci√≥n).
# üîπ 3. Ordenar Temas
# Los videos se ordenar√°n por duraci√≥n, de mayor a menor.
# üîπ 4. Promedio de Vistas
# Se calcular√° y mostrar√° el promedio de vistas de todos los videos en millones.
# üîπ 5. M√°xima Reproducci√≥n
# Se listar√° el video (o los videos) con la mayor cantidad de vistas.
# üîπ 6. M√≠nima Reproducci√≥n
# Se listar√° el video (o los videos) con la menor cantidad de vistas.
# üîπ 7. B√∫squeda por C√≥digo
# El usuario ingresar√° un c√≥digo de video y el programa mostrar√° todos los detalles asociados a ese video.
# üîπ 8. Listar por Colaborador
# El usuario ingresar√° el nombre de un colaborador (de una lista de colaboradores existentes) 
# y el programa mostrar√° todos los videos en los que haya participado.
# üîπ 9. Listar por Mes de Lanzamiento
# El usuario ingresar√° un mes y se listar√°n todos los temas lanzados en ese mes, sin importar el a√±o.
# üîπ 10. Salir
# Finalizar la ejecuci√≥n del programa.
# üìå Requisitos del Desarrollo
# ‚úÖ Estructura Modular: Cada funcionalidad deber√° estar programada en funciones espec√≠ficas para facilitar la reutilizaci√≥n del c√≥digo.
# ‚úÖ Manejo de Datos: Validar correctamente los formatos de entrada y realizar conversiones cuando sea necesario.
# ‚úÖ Interfaz Clara: Los men√∫s y las opciones deber√°n ser intuitivos y f√°ciles de usar.
# ‚úÖ Optimizaci√≥n de b√∫squedas: Garantizar eficiencia en las consultas sobre la lista de videos.

import sys
from os import system
from funciones import *
from lady_gaga import *

def main():
    menu_open = True
    datos_normalizados = []
    while menu_open:
        print("Bienvenido al fan club de Lady Gaga")
        opcion = int(input("MENU:\n" \
        "1. Normalizaci√≥n de Datos\n" \
        "2. Mostrar Lista de Temas\n" \
        "3. Ordenar Temas\n" \
        "4. Promedio de Vistas\n" \
        "5. M√°xima Reproducci√≥n\n" \
        "6. M√≠nima Reproducci√≥n\n" \
        "7. B√∫squeda por C√≥digo\n" \
        "8. Listar por Colaborador\n" \
        "9. Listar por Mes de Lanzamiento\n" \
        "10. Salir\n" \
        "Elige una opcion: "))
        match opcion:
            case 1:
                datos_normalizados = normalizar_datos(playlist_lady_gaga)
                print("Los datos fueron normalizados con exito.")
            case 2:
                if len(datos_normalizados) > 1:
                    mostrar_temas(datos_normalizados)
                else:
                    print("Primero normalice los datos.")
            case 3:
                if len(datos_normalizados) > 1:
                    ordenar_por_duracion(datos_normalizados)
                    print("Las canciones se ordenaron por duracion.")
                else:
                    print("Primero normalice los datos.")
            case 4:
                if len(datos_normalizados) > 1:
                    promedio = promedio_vistas_millones(datos_normalizados)
                    print(f"Promedio de vistas: {promedio:.2f} millones")
                else:
                    print("Primero normalice los datos.")
            case 5:
                if len(datos_normalizados) > 1:
                    videos = videos_max_min(datos_normalizados)
                    print("Videos con mas reproducciones:")
                    for video in videos:
                        print(f"{video['T√≠tulo']} con {video['Vistas']:,} vistas")
                else:
                    print("Primero normalice los datos.")
            case 6:
                if len(datos_normalizados) > 1:
                    videos = videos_max_min(datos_normalizados, 'min')
                    print("Videos con menos reproducciones:")
                    for video in videos:
                        print(f"{video['T√≠tulo']} con {video['Vistas']:,} vistas")
                else:
                    print("Primero normalice los datos.")
            case 7:
                if len(datos_normalizados) > 1:
                    codigo = input("Ingrese codigo del video: ")
                    resultado = buscar_video_por_codigo(datos_normalizados, codigo)
                    if resultado:
                        print("Video encontrado:")
                        for video in resultado:
                            print(f"{video}: {resultado[video]}")
                    else:
                        print("No se encontr√≥ video con ese c√≥digo.")
                else:
                    print("Primero normalice los datos.")
            case 8:
                if len(datos_normalizados) > 1:
                    colaborador = input("Ingrese nombre del colaborador: ")
                    videos = listar_videos_por_colaborador(datos_normalizados, colaborador)
                    if videos:
                        print(f"Videos con colaborador '{colaborador}':")
                        for video in videos:
                            print(f"{video['T√≠tulo']} (Vistas: {video['Vistas']:,})")
                    else:
                        print(f"No se encontraron videos con el colaborador '{colaborador}'.")
                else:
                    print("Primero normalice los datos.")
            case 9:
                if len(datos_normalizados) > 1:
                    mes = int(input("Ingrese n√∫mero del mes (1-12): "))
                    if mes:
                        mes = int(mes)
                        if 1 <= mes <= 12:
                            videos = listar_videos_por_mes(datos_normalizados, mes)

                            if videos:
                                print(f"Videos lanzados en el mes {mes}:")
                                for v in videos:
                                    print(f"{v['T√≠tulo']} (Fecha: {v['Fecha de lanzamiento'].strftime('%Y-%m-%d')})")
                            else:
                                print(f"No se encontraron videos lanzados en el mes {mes}.")
                        else:
                            print("N√∫mero de mes inv√°lido. Debe estar entre 1 y 12.")
                    else:
                        print("Entrada inv√°lida. Ingrese un n√∫mero.")
                else:
                    print("Primero normalice los datos.")
            case 10:
                print("Saliendo del programa...")
                menu_open = False
        system("pause")
        system("cls")



if __name__ == "__main__":
    sys.exit(main())